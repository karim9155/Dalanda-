%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Detailed PFE Report Template (50+ Pages)
%
% Based on ESCOMP Style
% Adapted for "Dalanda" Project by Gemini
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%----------------------------------------------------------------------------------------
%	PACKAGES AND OTHER DOCUMENT CONFIGURATIONS
%----------------------------------------------------------------------------------------

\documentclass[12pt, a4paper, oneside]{report}

\usepackage[utf8]{inputenc}
\usepackage[T1]{fontenc}
\usepackage{graphicx}
\usepackage{amsmath, amsfonts, amssymb}
\usepackage[english]{babel} % For English typography rules
\usepackage{hyperref}
\hypersetup{
    colorlinks=true,
    linkcolor=blue,
    filecolor=magenta,      
    urlcolor=cyan,
}
\usepackage{geometry}
\geometry{a4paper, top=2.5cm, bottom=2.5cm, left=2.5cm, right=2.5cm}

\usepackage{tocbibind} % Add ToC, LoF, LoT, Bibliography to the Table of Contents
\usepackage{listings} % For code snippets
\usepackage{xcolor}   % For custom colors in code
\usepackage{booktabs} % For professional quality tables
\usepackage{float}    % To improve figure placement with [H]

% Define custom colors for code listings
\definecolor{codegreen}{rgb}{0,0.6,0}
\definecolor{codegray}{rgb}{0.5,0.5,0.5}
\definecolor{codepurple}{rgb}{0.58,0,0.82}
\definecolor{backcolour}{rgb}{0.95,0.95,0.92}

% Configure listings style
\lstdefinestyle{mystyle}{
    backgroundcolor=\color{backcolour},   
    commentstyle=\color{codegreen},
    keywordstyle=\color{magenta},
    numberstyle=\tiny\color{codegray},
    stringstyle=\color{codepurple},
    basicstyle=\ttfamily\footnotesize,
    breakatwhitespace=false,         
    breaklines=true,                 
    captionpos=b,                    
    keepspaces=true,                 
    numbers=left,                    
    numbersep=5pt,                  
    showspaces=false,                
    showstringspaces=false,
    showtabs=false,                  
    tabsize=2
}
\lstset{style=mystyle}

% Spacing between paragraphs
\setlength{\parskip}{1.5ex}

%----------------------------------------------------------------------------------------

\begin{document}

%----------------------------------------------------------------------------------------
%	TITLE PAGE
%----------------------------------------------------------------------------------------

\begin{titlepage}
\centering

% UPPER PART OF THE PAGE
\includegraphics[width=0.4\textwidth]{path/to/your/school_logo.png}\\[1.5cm] % Replace with your school logo path
{\Large \bfseries GRADUATE SCHOOL / UNIVERSITY}\\[0.5cm] % Replace with your school name
{\large Specialization: Software Engineering}\\[2.0cm] % Replace with your specialty

% TITLE
{\huge \bfseries Final Year Project}\\[1.5cm]
{\LARGE \bfseries Design and Implementation of an Invoice Management System with a Conversational Assistant via Telegram}\\[2.5cm] % Your project title

% AUTHOR AND SUPERVISORS
\begin{minipage}{0.4\textwidth}
\begin{flushleft} \large
\emph{Realized by:}\\
Your Name Here % Your Name
\end{flushleft}
\end{minipage}
\begin{minipage}{0.4\textwidth}
\begin{flushright} \large
\emph{Supervisors:}\\
Mr. Academic Supervisor Name (ESPRIT) \\ % Replace with names
Mr. Company Supervisor Name (Company)
\end{flushright}
\end{minipage}

\vfill % Fills the vertical space

% LOWER PART OF THE PAGE
{\large Academic Year 2024 - 2025}\\[1cm]
\includegraphics[width=0.3\textwidth]{path/to/your/company_logo.png} % Replace with your company logo path

\end{titlepage}

%----------------------------------------------------------------------------------------
%	FRONT MATTER
%----------------------------------------------------------------------------------------

\frontmatter % Roman numerals for page numbers

\chapter*{Dedications}
\vspace*{10cm} % Add vertical space
\begin{flushright}
    \textit{To my family, my friends...} % Your dedication text
\end{flushright}
\newpage

\chapter*{Acknowledgements}
I want to express my deep gratitude to... % Your acknowledgements text
\newpage

\tableofcontents
\newpage

\listoffigures
\newpage

\listoftables
\newpage

\chapter*{Acronymes}
\begin{tabular}{l l}
    \textbf{API} & Application Programming Interface \\
    \textbf{CRUD} & Create, Read, Update, Delete \\
    \textbf{JWT} & JSON Web Token \\
    \textbf{JPA} & Jakarta Persistence API \\
    \textbf{NLP} & Natural Language Processing \\
    \textbf{PFE} & Projet de Fin d'Ã‰tudes \\
    \textbf{SPA} & Single Page Application \\
    \textbf{UML} & Unified Modeling Language \\
    % Add other acronyms you use
\end{tabular}
\newpage

%----------------------------------------------------------------------------------------
%	MAIN CONTENT
%----------------------------------------------------------------------------------------

\mainmatter % Arabic numerals for page numbers

\chapter{General Introduction}
% Aim for 2-3 pages for this chapter.
\section{Context}
Invoice management is a cornerstone of any company's long-term viability, especially for the small and medium-sized enterprises (SMEs) that form the backbone of the economy. Accurate and timely invoicing is not only a legal obligation but is also crucial for maintaining healthy cash flow, ensuring regulatory compliance, and preserving good customer relationships.

However, many SMEs and self-employed individuals still rely on manual processes to manage this critical part of their operations. Using spreadsheets like Excel or Word documents to create, track, and archive invoices is a common practice. While functional on a small scale, these methods quickly reveal their limitations: they are time-consuming, prone to human error (miscalculations, forgotten VAT, incorrect invoice numbers), and offer limited traceability. Tracking payments becomes a tedious task, increasing the risk of delays and defaults that can weaken a company's financial stability.

In parallel, the professional world is undergoing a rapid digital transformation. Software as a Service (SaaS) solutions have emerged, offering invoicing tools of varying complexity. However, these solutions can be costly, oversized for the actual needs of small organizations, or lacking in flexibility. Moreover, adopting a new tool often presents a barrier, requiring a learning curve and the migration of existing data.

In this landscape, a key trend is emerging: the integration of work tools into daily communication flows. Instant messaging applications like Telegram are no longer just for discussion but are becoming genuine productivity platforms. The rise of conversational assistants, powered by advancements in artificial intelligence (AI) and natural language processing (NLP), is paving the way for more intuitive and accessible interactions. It is within this context that the Dalanda project is positioned: addressing the need for a modern, simple, and efficient invoicing solution that integrates with current mobile usage habits.

\section{Problem Statement}
The central problem of this project stems directly from the context described. SMEs and independent workers face a dilemma: either they continue with manual invoicing methods, thereby accepting inefficiency, the risk of errors, and the associated mental load; or they invest in off-the-shelf invoicing software that is often unsuitable, either due to its prohibitive cost or its unnecessary complexity.

The core of the problem can be broken down into several friction points:

\begin{itemize}
    \item \textbf{Accessibility and Cost:} Comprehensive software solutions represent a significant investment, often in the form of monthly subscriptions, which can be a barrier for a startup or a freelancer.
    \item \textbf{Complexity and Learning Curve:} Many invoicing software packages are designed for larger companies and include a plethora of features (inventory management, advanced accounting, etc.) that are unnecessary for a small business. This complexity leads to a cluttered interface and a steep learning curve that discourages adoption.
    \item \textbf{Wasted Time and Manual Errors:} Manually creating invoices in spreadsheets or word processors is repetitive and prone to data entry mistakes, VAT calculation errors, or numbering issues, which can have legal and financial consequences. Tracking due dates and payments is also a source of stress and wasted time.
    \item \textbf{Lack of Mobility and Immediacy:} Processes based on office files are not well-suited for mobile use. Creating or viewing an invoice from a smartphone is often cumbersome, yet responsiveness is a key part of the client relationship.
    \item \textbf{Context Switching:} Invoice management typically occurs outside of the communication channels where business is discussed. A client might request a quote on Telegram, the conversation continues over email, and the invoice is ultimately generated in another software. This fragmentation of processes undermines efficiency.
\end{itemize}

The problem statement is therefore as follows: How can we provide small businesses with an invoicing tool that is powerful, easy to access, affordable, and seamlessly integrates into their daily digital communication habits to reduce administrative friction and accelerate the billing cycle? This project aims to answer this question by proposing a solution that combines the robustness of a web application with the simplicity of a conversational interface.
\section{Project Objectives}
% List the objectives clearly.
The main objective of this project, named \textbf{Dalanda}, is to design and develop a complete invoice management solution. The sub-objectives are as follows:
\begin{itemize}
    \item Implement a robust and secure RESTful API with Spring Boot.
    \item Develop an intuitive and responsive single-page web interface (SPA) with Angular.
    \item Implement a conversational assistant on Telegram capable of understanding and executing commands in natural language.
    \item Orchestrate the assistant's logic using the n8n automation platform.
    \item Ensure the deployment of the solution using Docker.
\end{itemize}
\section{Report Structure}
% Briefly describe the content of each chapter.
This report is structured into five chapters. The first chapter presents the general context of the project... The second chapter offers a detailed state of the art... The third chapter is devoted to technical design... The fourth chapter describes the concrete implementation... Finally, the fifth chapter is dedicated to the testing and validation strategy...

\chapter{Context, State of the Art and Needs Analysis}
% Aim for 8-12 pages. This is a key academic chapter.
\section{Introduction}
% Briefly introduce the chapter's goals: setting the scene, analyzing what exists, and defining what needs to be built.
\section{Presentation of the Host Organization}
\subsection{History and Activities}
% Describe the company where you did your internship
\subsection{Project Positioning}
% Explain how your project fits into the company's goals. Was it an internal need? A proof of concept for future clients?
\section{State of the Art}
\subsection{Comparative Analysis of Invoicing Systems}
% This is a major section. Create a table comparing 3-4 existing solutions (e.g., Zoho Invoice, FreshBooks, Wave).
% Compare them on criteria like: Features, Pricing, API availability, User Experience, Mobile Access, Automation Capabilities.
\begin{table}[H]
    \centering
    \caption{Comparative table of existing invoicing solutions.}
    \label{tab:comparison}
    \begin{tabular}{l p{3cm} p{3cm} p{3cm}}
        \toprule
        \textbf{Criterion} & \textbf{Zoho Invoice} & \textbf{FreshBooks} & \textbf{Wave} \\
        \midrule
        Price model & Freemium & By subscription & Free (with transaction fees) \\
        API Access & Yes, complete & Yes & Limited \\
        Automation & Advanced & Medium & Basic \\
        Mobile Interface & Dedicated app & Dedicated app & Web responsive \\
        \bottomrule
    \end{tabular}
\end{table}
% After the table, write a paragraph analyzing the results and identifying the gap your project fills.
\subsection{Study of Key Technologies}
\subsubsection{Backend Architecture: The choice of Spring Boot}
% Justify your choice. Talk about the Spring ecosystem (Data JPA, Security), performance, scalability, and why it's suited for enterprise-level applications.
\subsubsection{Frontend Architecture: The choice of Angular}
% Justify your choice. Discuss its component-based architecture, TypeScript for type safety, powerful CLI, and the benefits of Angular Material for UI consistency.
\subsubsection{Automation and Integration: The power of n8n}
% Explain what n8n is (workflow automation tool). Why did you choose it over alternatives like Zapier or writing a custom bot from scratch? (e.g., open-source, self-hostable, visual interface).
\subsubsection{Conversational Interfaces and AI}
% Discuss the paradigm of conversational UI. Explain the role of NLP/NLU. Briefly mention Large Language Models (LLMs) like GPT-4 and their ability to parse unstructured text into structured data (JSON), which is central to your project.
\section{Analysis and Specification of Needs}
% This section formally defines the requirements derived from your state-of-the-art analysis.
\subsection{Functional Requirements (User Stories)}
\begin{table}[H]
    \centering
    \caption{Examples of functional requirements in the form of User Stories.}
    \label{tab:user_stories}
    \begin{tabular}{l p{10cm}}
        \toprule
        \textbf{ID} & \textbf{Description} \\
        \midrule
        UF-01 & As a user, I want to be able to register and log in to secure access to my data. \\
        UF-02 & As a user, I want to create, view, modify and delete customers and companies. \\
        UF-03 & As a user, I want to create a detailed invoice (multiple items, taxes, dates). \\
        UF-04 & As a user, I want to be able to tell my Telegram bot "create an invoice" to initiate the creation process. \\
        \bottomrule
    \end{tabular}
\end{table}
\subsection{Non-Functional Requirements}
% Detail these requirements.
\begin{itemize}
    \item \textbf{Security:} Use of HTTPS, hashed passwords (BCrypt), protection against XSS and CSRF attacks.
    \item \textbf{Performance:} API response time of less than 200ms for CRUD requests.
    \item \textbf{Reliability:} Service availability of 99.9\%.
    \item \textbf{Maintainability:} Modular, commented code that respects the best practices of each framework.
\end{itemize}

\chapter{Solution Design and Architecture}
% Aim for 10-15 pages. This chapter shows your engineering thought process.
\section{Introduction}
This chapter presents the software architecture and detailed design models of the Dalanda solution.
\section{Global Architecture}
% Use this section to present your high-level diagrams and explain how everything connects.
\subsection{Component Diagram}
\begin{figure}[H]
    \centering
    \includegraphics[width=0.7\textwidth]{path/to/your/component_diagram.png}
    \caption{Application component diagram.}
    \label{fig:component_diagram}
\end{figure}
\subsection{Deployment Diagram}
\begin{figure}[H]
    \centering
    \includegraphics[width=0.7\textwidth]{path/to/your/deployment_diagram.png}
    \caption{Solution deployment diagram on Docker.}
    \label{fig:deployment_diagram}
\end{figure}
\section{Detailed Backend Design}
\subsection{Conceptual Data Model (CDM)}
% Include your class diagram or an Entity-Relationship Diagram.
\begin{figure}[H]
    \centering
    \includegraphics[width=\textwidth]{path/to/your/class_diagram.png}
    \caption{Class diagram of JPA entities.}
    \label{fig:class_diagram_detail}
\end{figure}
\subsection{REST API Design}
The API is structured around several key resources, each with its own set of endpoints.

\subsubsection{Authentication API (/api/auth)}
\begin{itemize}
    \item \textbf{POST /api/auth/register}: Creates a new user account.
    \item \textbf{POST /api/auth/login}: Authenticates a user and returns a JWT token.
\end{itemize}

\subsubsection{User API (/api/auth/users)}
\begin{itemize}
    \item \textbf{GET /api/auth/users/me}: Retrieves the ID of the currently authenticated user.
\end{itemize}

\subsubsection{Client Management API (/api/clients)}
\begin{itemize}
    \item \textbf{GET /api/clients}: Retrieves a list of all clients.
    \item \textbf{GET /api/clients/\{id\}}: Retrieves a single client by their ID.
    \item \textbf{POST /api/clients}: Creates a new client.
    \item \textbf{PUT /api/clients/\{id\}}: Updates an existing client.
    \item \textbf{DELETE /api/clients/\{id\}}: Deletes a client.
\end{itemize}

\subsubsection{Company Management API (/api/companies)}
\begin{itemize}
    \item \textbf{GET /api/companies}: Retrieves a list of all companies.
    \item \textbf{GET /api/companies/\{id\}}: Retrieves a single company by its ID.
    \item \textbf{POST /api/companies}: Creates a new company.
    \item \textbf{PUT /api/companies/\{id\}}: Updates an existing company.
    \item \textbf{DELETE /api/companies/\{id\}}: Deletes a company.
    \item \textbf{POST /api/companies/\{id\}/logo}: Uploads a logo for a specific company.
    \item \textbf{POST /api/companies/\{id\}/stamp}: Uploads a stamp/signature for a specific company.
\end{itemize}

\subsubsection{Invoice Management API (/api/invoices)}
\begin{itemize}
    \item \textbf{GET /api/invoices}: Retrieves a list of all invoices.
    \item \textbf{GET /api/invoices/user/\{userId\}}: Retrieves all invoices for a specific user.
    \item \textbf{GET /api/invoices/\{id\}}: Retrieves a single invoice by its ID.
    \item \textbf{POST /api/invoices}: Creates a new invoice.
    \item \textbf{PUT /api/invoices/\{id\}}: Updates an existing invoice.
    \item \textbf{DELETE /api/invoices/\{id\}}: Deletes an invoice.
    \item \textbf{GET /api/invoices/\{id\}/pdf}: Generates and downloads a PDF version of a specific invoice.
\end{itemize}
\subsection{Sequence Diagrams of Main Use Cases}
% Include sequence diagrams for key scenarios.
\begin{figure}[H]
    \centering
    \includegraphics[width=0.8\textwidth]{path/to/your/seq_create_invoice_api.png}
    \caption{Sequence diagram: Creation of an invoice via the REST API.}
    \label{fig:seq_api}
\end{figure}
\begin{figure}[H]
    \centering
    \includegraphics[width=\textwidth]{path/to/your/seq_create_invoice_telegram.png}
    \caption{Sequence diagram: Creation of an invoice via Telegram and n8n.}
    \label{fig:seq_telegram}
\end{figure}

\section{n8n Workflow Design}
% Use the image you provided.
\begin{figure}[H]
    \centering
    \includegraphics[width=\textwidth]{path/to/your/n8n_workflow_full.png}
    \caption{Detailed view of the n8n automation workflow.}
    \label{fig:n8n_workflow_detail}
\end{figure}
\subsection{AI Node Logic (Prompt Engineering)}
% This is a very important part. Explain the prompt you gave to the AI.
The system prompt of the OpenAI node is crucial. It instructs the model to only respond in JSON and to structure its output according to the detected intent...
\begin{lstlisting}[language=json, caption={Example of expected JSON output from the AI}]
{
  "action": "client",
  "companyName": "ABC Corp",
  "otherInfo": "Some other info"
}
\end{lstlisting}

\chapter{Sprint 1: Backend Foundation and Core API}
\section{Introduction}
This chapter details the work carried out during the first sprint, which focused on establishing the technical foundation of the backend application. The primary goals were to set up the Spring Boot project, implement a robust security layer, and develop the core APIs for user and client management.

\section{Sprint Backlog}
The backlog for this sprint included the following user stories:
\begin{itemize}
    \item As a user, I want to register for an account so I can access the service.
    \item As a user, I want to log in securely to the application to protect my data.
    \item As a developer, I need a project structure with proper dependency management (Maven).
    \item As an authenticated user, I want to create, read, update, and delete clients.
\end{itemize}

\section{Design and Implementation}
\subsection{Project Setup}
The project was initialized using Spring Initializr with Java 17, Maven, and key dependencies like Spring Web, Spring Data JPA, and Spring Security.

\subsection{Security Implementation}
A security layer using JWT (JSON Web Tokens) was implemented. This involved creating a `JwtTokenProvider` to generate and validate tokens, and configuring Spring Security to protect endpoints, requiring authentication for all API calls except for registration and login.

\subsection{API Development}
The following core endpoints were developed and tested:
\begin{itemize}
    \item `POST /api/auth/register`
    \item `POST /api/auth/login`
    \item `GET, POST, PUT, DELETE /api/clients`
\end{itemize}

\section{Sprint Review}
At the end of the sprint, the backend was functional, with a secure authentication system and a complete CRUD API for client management. The main challenge was correctly configuring the JWT security filter chain.

\section{Burndown Chart}
\begin{figure}[H]
    \centering
    \includegraphics[width=0.7\textwidth]{path/to/your/sprint1_burndown.png}
    \caption{Burndown chart for Sprint 1.}
    \label{fig:sprint1_burndown}
\end{figure}

\chapter{Sprint 2: Frontend Implementation and Entity Management}
\section{Introduction}
The second sprint was dedicated to building the frontend application using Angular. The main objectives were to create the user interface for authentication, as well as for managing clients and companies, and to connect these components to the backend API developed in Sprint 1.

\section{Sprint Backlog}
\begin{itemize}
    \item As a user, I want a web page to register and log in.
    \item As a logged-in user, I want to see a dashboard where I can manage my data.
    \item As a user, I want a user-friendly interface to add, view, edit, and delete my clients.
    \item As a user, I want to be able to manage my company's details, including uploading a logo and a stamp.
\end{itemize}

\section{Design and Implementation}
\subsection{Angular Project Setup}
An Angular project was created using the Angular CLI. Angular Material was chosen for UI components to ensure a consistent and professional look.

\subsection{Authentication UI}
Login and registration forms were created. An `AuthService` was implemented to handle communication with the backend, and an HTTP interceptor was used to attach the JWT token to all subsequent requests.

\subsection{Client and Company Management UI}
CRUD interfaces for clients and companies were developed. This included creating forms for data entry and tables to display the existing data. Services were created to interact with the `/api/clients` and `/api/companies` endpoints.

\section{Sprint Review}
By the end of this sprint, a functional frontend was in place. Users could register, log in, and manage their clients and company information. The main challenge was mastering reactive forms in Angular for complex data structures.

\section{Burndown Chart}
\begin{figure}[H]
    \centering
    \includegraphics[width=0.7\textwidth]{path/to/your/sprint2_burndown.png}
    \caption{Burndown chart for Sprint 2.}
    \label{fig:sprint2_burndown}
\end{figure}

\chapter{Sprint 3: Invoice Management and PDF Generation}
\section{Introduction}
This sprint focused on the core functionality of the application: invoice management. The goals were to implement the backend logic and frontend interface for creating and managing invoices, as well as the ability to generate PDF versions of these invoices.

\section{Sprint Backlog}
\begin{itemize}
    \item As a user, I want to create a new invoice with multiple line items, taxes, and due dates.
    \item As a user, I want to view a list of all my invoices and see their status (e.g., paid, pending).
    \item As a user, I want to be able to edit and delete existing invoices.
    \item As a user, I want to download a PDF version of any invoice for my records or to send to a client.
\end{itemize}

\section{Design and Implementation}
\subsection{Backend Invoice API}
The Spring Boot application was extended with a new set of endpoints under `/api/invoices` for full CRUD functionality. A service layer was created to handle the business logic, such as calculating totals and managing invoice statuses.

\subsection{PDF Generation}
The iTextPDF library was integrated into the backend. A `PdfGeneratorService` was created to take invoice data and generate a professional-looking PDF document, including the company logo and other details.

\subsection{Frontend Invoice UI}
The Angular application was updated with a new module for invoice management. This included a complex reactive form for creating and editing invoices, especially for handling a dynamic list of invoice items using `FormArray`.

\section{Sprint Review}
The core feature of the application was completed in this sprint. Users could now manage the entire lifecycle of an invoice. The PDF generation proved challenging, especially with regard to layout and styling.

\section{Burndown Chart}
\begin{figure}[H]
    \centering
    \includegraphics[width=0.7\textwidth]{path/to/your/sprint3_burndown.png}
    \caption{Burndown chart for Sprint 3.}
    \label{fig:sprint3_burndown}
\end{figure}

\chapter{Sprint 4: Conversational Assistant and n8n Integration}
\section{Introduction}
The final sprint was focused on innovation by adding a conversational assistant via Telegram. The goal was to allow users to perform simple actions, like creating an invoice, using natural language commands from their mobile devices.

\section{Sprint Backlog}
\begin{itemize}
    \item As a user, I want to connect my account to a Telegram bot.
    \item As a user, I want to be able to say "create an invoice for client X for 500 dollars" and have a draft invoice created.
    \item As a developer, I need to set up a workflow automation tool (n8n) to orchestrate the interaction between Telegram and my backend.
    \item As a developer, I need to integrate an AI service to parse natural language into structured data.
\end{itemize}

\section{Design and Implementation}
\subsection{Telegram Bot Setup}
A new bot was created on Telegram using the BotFather, and its API token was obtained.

\subsection{n8n Workflow}
A new workflow was designed in n8n. The workflow is triggered by an incoming message on Telegram. It then sends the message to an OpenAI node for natural language processing. The AI is prompted to extract the intent and entities (e.g., action, client name, amount) and return a JSON object.

\subsection{Backend Integration}
The n8n workflow then makes a call to the backend API (`POST /api/invoices`) with the structured data to create the invoice. The workflow handles user session management to associate the Telegram user with their account in the application.

\section{Sprint Review}
This sprint successfully delivered a powerful and innovative feature. The conversational assistant worked as expected, though "prompt engineering" for the AI node required several iterations to become reliable. The integration between the different services (Telegram, n8n, OpenAI, and the Spring backend) was the most complex part of this sprint.

\section{Burndown Chart}
\begin{figure}[H]
    \centering
    \includegraphics[width=0.7\textwidth]{path/to/your/sprint4_burndown.png}
    \caption{Burndown chart for Sprint 4.}
    \label{fig:sprint4_burndown}
\end{figure}

\chapter{Tests and Validation}
% Aim for 5-8 pages. This shows engineering rigor.
\section{Introduction}
To ensure the quality and reliability of the Dalanda application, a multi-level testing strategy has been implemented...
\section{Unit Tests}
\subsection{Backend Tests}
% Describe your approach to unit testing services and controllers. Mention tools like JUnit 5, Mockito. Show a simple test case.
\begin{lstlisting}[language=Java, caption={Example of a unit test for InvoiceService}]
// A simple JUnit test case for a method in your service
@Test
void testCreateInvoice() {
    // ...
}
\end{lstlisting}
\subsection{Frontend Tests}
% Describe your approach to unit testing Angular components. Mention Karma and Jasmine. Show a simple test case for a component.
\section{Integration Tests}
% Describe how you tested the integration between different parts of your system.
\subsection{REST API Test}
% Mention tools like Postman or REST Assured to test your API endpoints.
\subsection{n8n Workflow Test}
% Explain how you manually tested the n8n workflow from end-to-end, from sending a message on Telegram to verifying the data in your database.
\section{Functional Validation}
% Present a table that links your functional requirements (from Chapter 3) to test scenarios, and show their status (e.g., "PassÃ©").
\begin{table}[H]
    \centering
    \caption{Validation of use cases.}
    \label{tab:validation}
    \begin{tabular}{l l l}
        \toprule
        \textbf{ID Need} & \textbf{Test Scenario} & \textbf{Result} \\
        \midrule
        UF-01 & The user enters their credentials, receives a token. & Passed \\
        UF-04 & The user sends "create an invoice" on Telegram... & Passed \\
        \bottomrule
    \end{tabular}
\end{table}

\chapter{General Conclusion}
% Aim for 2-3 pages.
\section{Project Summary}
% Summarize what you did and how it met the objectives.
\section{Project Contributions}
\subsection{Technical and Professional Contributions}
% What did you learn? (Spring, Angular, n8n, AI, Docker, etc.)
\subsection{Personal Contributions}
% Soft skills: autonomy, problem-solving, project management.
\section{Limitations and Future Prospects}
The Dalanda solution is functional, but can be extended:
\begin{itemize}
    \item \textbf{Immediate Improvements:} Currency management, customizable PDF templates.
    \item \textbf{Future Evolutions:} A dashboard with statistics (revenue, unpaid invoices), integration with payment systems, extension to other messaging platforms (WhatsApp, Slack).
\end{itemize}

%----------------------------------------------------------------------------------------
%	BIBLIOGRAPHY
%----------------------------------------------------------------------------------------

\begin{thebibliography}{99} 
    \bibitem{spring}
    Site officiel de Spring Boot. \url{https://spring.io/projects/spring-boot}
    
    \bibitem{angular}
    Site officiel d'Angular. \url{https://angular.io/}
    
    \bibitem{n8n}
    Site officiel de n8n. \url{https://n8n.io/}

    \bibitem{itext}
    Site officiel d'iTextPDF. \url{https://itextpdf.com/}
    
    % Add other references: books, articles, documentation pages...
\end{thebibliography}

%----------------------------------------------------------------------------------------
%	APPENDICES
%----------------------------------------------------------------------------------------

\appendix
\chapter{Key Configuration Files}
\section{Backend - pom.xml}
\begin{lstlisting}[language=XML, caption={pom.xml file of the Spring Boot project.}]
<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>
    <parent>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-starter-parent</artifactId>
        <version>3.4.4</version>
        <relativePath/> <!-- lookup parent from repository -->
    </parent>
    <groupId>com.example</groupId>
    <artifactId>Dalanda</artifactId>
    <version>0.0.1-SNAPSHOT</version>
    <name>Dalanda</name>
    <description>Dalanda</description>
    <url/>
    <licenses>
        <license/>
    </licenses>
    <developers>
        <developer/>
    </developers>
    <scm>
        <connection/>
        <developerConnection/>
        <tag/>
        <url/>
    </scm>
    <properties>
        <java.version>17</java.version>
    </properties>

    <dependencies>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-data-jpa</artifactId>
        </dependency>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-web</artifactId>
        </dependency>

        <dependency>
            <groupId>com.mysql</groupId>
            <artifactId>mysql-connector-j</artifactId>
            <scope>runtime</scope>
        </dependency>
        <dependency>
            <groupId>org.projectlombok</groupId>
            <artifactId>lombok</artifactId>
            <optional>true</optional>
        </dependency>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-test</artifactId>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-security</artifactId>
        </dependency>
        <!-- JJWT API -->
        <dependency>
            <groupId>io.jsonwebtoken</groupId>
            <artifactId>jjwt-api</artifactId>
            <version>0.11.5</version>
        </dependency>
        <!-- JJWT runtime implementations -->
        <dependency>
            <groupId>io.jsonwebtoken</groupId>
            <artifactId>jjwt-impl</artifactId>
            <version>0.11.5</version>
            <scope>runtime</scope>
        </dependency>
        <dependency>
            <groupId>io.jsonwebtoken</groupId>
            <artifactId>jjwt-jackson</artifactId>
            <version>0.11.5</version>
            <scope>runtime</scope>
        </dependency>
        <dependency>
            <groupId>com.itextpdf</groupId>
            <artifactId>itextpdf</artifactId>
            <version>5.5.13.3</version>
        </dependency>
        <dependency>
            <groupId>com.microsoft.sqlserver</groupId>
            <artifactId>mssql-jdbc</artifactId>
            <version>10.2.0.jre17</version>
        </dependency>

    </dependencies>

    <build>
        <plugins>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-compiler-plugin</artifactId>
                <configuration>
                    <annotationProcessorPaths>
                        <path>
                            <groupId>org.projectlombok</groupId>
                            <artifactId>lombok</artifactId>
                        </path>
                    </annotationProcessorPaths>
                        <source>${java.version}</source>
                        <target>${java.version}</target>
                        <release>${java.version}</release>

                </configuration>
            </plugin>

            <plugin>
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-maven-plugin</artifactId>
                <configuration>
                    <excludes>
                        <exclude>
                            <groupId>org.projectlombok</groupId>
                            <artifactId>lombok</artifactId>
                        </exclude>
                    </excludes>
                </configuration>
            </plugin>
        </plugins>
    </build>

</project>
\end{lstlisting}

\section{Backend - application.properties}
\begin{lstlisting}[language=properties, caption={application.properties file of the Spring Boot project.}]
spring.application.name=Dalanda
# ?? DATASOURCE ???????????????????????????????????????????????????????????????
spring.datasource.url=jdbc:mysql://localhost:3306/dalandadb?createDatabaseIfNotExist=true&useSSL=false&serverTimezone=UTC
spring.datasource.username=root
spring.datasource.password=
spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver
# ?? JPA / HIBERNATE ??????????????????????????????????????????????????????????
# `update` will create missing tables/columns (but not drop anything).
# Use `create` if you want Hibernate to drop+recreate schema on each start.
spring.jpa.hibernate.ddl-auto=update
# show SQL
spring.jpa.show-sql=true
# MySQL8 dialect
spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.MySQL8Dialect
# JWT settings
jwt.secret=k34P/y8j7RL9b/w/6syAsnY1o6KbiimA3kEj2+XItEc=
jwt.expirationMs=3600000
\end{lstlisting}

\section{Frontend - package.json}
\begin{lstlisting}[language=json, caption={package.json file of the Angular project.}]
{
  "name": "dalanda-frontend",
  "version": "0.0.0",
  "scripts": {
    "ng": "ng",
    "start": "ng serve",
    "build": "ng build",
    "watch": "ng build --watch --configuration development",
    "test": "ng test"
  },
  "private": true,
  "dependencies": {
    "@angular/animations": "^19.2.8",
    "@angular/cdk": "^19.2.11",
    "@angular/common": "^19.2.0",
    "@angular/compiler": "^19.2.0",
    "@angular/core": "^19.2.0",
    "@angular/forms": "^19.2.0",
    "@angular/material": "^19.2.11",
    "@angular/platform-browser": "^19.2.0",
    "@angular/platform-browser-dynamic": "^19.2.0",
    "@angular/router": "^19.2.0",
    "rxjs": "~7.8.0",
    "tslib": "^2.3.0",
    "zone.js": "~0.15.0"
  },
  "devDependencies": {
    "@angular-devkit/build-angular": "^19.2.9",
    "@angular/cli": "^19.2.9",
    "@angular/compiler-cli": "^19.2.0",
    "@types/jasmine": "~5.1.0",
    "jasmine-core": "~5.6.0",
    "karma": "~6.4.0",
    "karma-chrome-launcher": "~3.2.0",
    "karma-coverage": "~2.2.0",
    "karma-jasmine": "~5.1.0",
    "karma-jasmine-html-reporter": "~2.1.0",
    "typescript": "~5.7.2"
  }
}
\end{lstlisting}

\section{Frontend - angular.json}
\begin{lstlisting}[language=json, caption={angular.json file of the Angular project.}]
{
  "$schema": "./node_modules/@angular/cli/lib/config/schema.json",
  "version": 1,
  "newProjectRoot": "projects",
  "projects": {
    "dalanda-frontend": {
      "projectType": "application",
      "schematics": {
        "@schematics/angular:component": {
          "standalone": false
        },
        "@schematics/angular:directive": {
          "standalone": false
        },
        "@schematics/angular:pipe": {
          "standalone": false
        }
      },
      "root": "",
      "sourceRoot": "src",
      "prefix": "app",
      "architect": {
        "build": {
          "builder": "@angular-devkit/build-angular:application",
          "options": {
            "outputPath": "dist/dalanda-frontend",
            "index": "src/index.html",
            "browser": "src/main.ts",
            "polyfills": [
              "zone.js"
            ],
            "tsConfig": "tsconfig.app.json",
            "assets": [
              {
                "glob": "**/*",
                "input": "public"
              }
            ],
            "styles": [
              "@angular/material/prebuilt-themes/magenta-violet.css",
              "src/styles.css"
            ],
            "scripts": []
          },
          "configurations": {
            "production": {
              "budgets": [
                {
                  "type": "initial",
                  "maximumWarning": "500kB",
                  "maximumError": "1MB"
                },
                {
                  "type": "anyComponentStyle",
                  "maximumWarning": "4kB",
                  "maximumError": "8kB"
                }
              ],
              "outputHashing": "all"
            },
            "development": {
              "optimization": false,
              "extractLicenses": false,
              "sourceMap": true
            }
          },
          "defaultConfiguration": "production"
        },
        "serve": {
          "builder": "@angular-devkit/build-angular:dev-server",
          "configurations": {
            "production": {
              "buildTarget": "dalanda-frontend:build:production"
            },
            "development": {
              "buildTarget": "dalanda-frontend:build:development"
            }
          },
          "defaultConfiguration": "development"
        },
        "extract-i18n": {
          "builder": "@angular-devkit/build-angular:extract-i18n"
        },
        "test": {
          "builder": "@angular-devkit/build-angular:karma",
          "options": {
            "polyfills": [
              "zone.js",
              "zone.js/testing"
            ],
            "tsConfig": "tsconfig.spec.json",
            "assets": [
              {
                "glob": "**/*",
                "input": "public"
              }
            ],
            "styles": [
              "@angular/material/prebuilt-themes/magenta-violet.css",
              "src/styles.css"
            ],
            "scripts": []
          }
        }
      }
    }
  }
}
\end{lstlisting}

\chapter{Docker Configuration}
\section{Docker - docker-compose.yml}
\begin{lstlisting}[language=yaml, caption={docker-compose.yml file for the project.}]
version: '3.8'

services:
  db:
    image: mysql:8.0
    restart: always
    environment:
      # Create your database
      MYSQL_DATABASE: dalandadb
      # Allow the root user to have an empty password
      MYSQL_ALLOW_EMPTY_PASSWORD: "yes"
    ports:
      - "3306:3306"
    volumes:
      - db_data:/var/lib/mysql

  app:
    image: karimkli/my-spring-api
    depends_on:
      - db
    environment:
      SPRING_DATASOURCE_URL:      jdbc:mysql://db:3306/dalandadb?createDatabaseIfNotExist=true&useSSL=false&serverTimezone=UTC
      SPRING_DATASOURCE_USERNAME: root
      SPRING_DATASOURCE_PASSWORD: ""
    ports:
      - "8080:8080"
    restart: on-failure

volumes:
  db_data:
\end{lstlisting}

\section{Docker - Dockerfile}
\begin{lstlisting}[language=dockerfile, caption={Dockerfile for the backend application.}]
# Dockerfile
FROM eclipse-temurin:17-jre
VOLUME /tmp
COPY target/*.jar app.jar
EXPOSE 8080
ENTRYPOINT ["java","-jar","/app.jar"]
\end{lstlisting}


\end{document}
